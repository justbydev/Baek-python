import sys
from collections import deque

def bfs(N, L, R, visit, mp, stx, sty):
    queue=deque()
    dx=[0, -1, 0, 1]
    dy=[-1, 0, 1, 0]
    queue.append([stx, sty])
    res=0
    vst=deque()
    sm=0
    visit[stx][sty]=1
    while queue:
        now=queue.popleft()
        vst.append([now[0],now[1]])
        sm+=mp[now[0]][now[1]]
        res+=1
        for i in range(4):
            nowx=now[0]+dx[i]
            nowy=now[1]+dy[i]
            if nowx<0 or nowx>=N or nowy<0 or nowy>=N or visit[nowx][nowy]==1:
                continue
            cal=abs(mp[now[0]][now[1]]-mp[nowx][nowy])
            if cal>=L and cal<=R:
                queue.append([nowx, nowy])
                visit[nowx][nowy]=1
    if res==1:
        return -1
    else:
        ave=sm//res
        while vst:
            now=vst.popleft()
            mp[now[0]][now[1]]=ave
        return 1
N,L,R=map(int, sys.stdin.readline().split())
mp=[]
for _ in range(N):
    mp.append(list(map(int, sys.stdin.readline().split())))
visit=[[0]*N for _ in range(N)]
res=0
flag=0
while True:
    for i in range(N):
        for j in range(N):
            if visit[i][j]==0:
                r=bfs(N, L, R, visit, mp, i, j)
                if r==1:
                    flag=1
    visit=[[0]*N for _ in range(N)]
    if flag==1:
        res+=1
        flag=0
    else:
        break
print(res)