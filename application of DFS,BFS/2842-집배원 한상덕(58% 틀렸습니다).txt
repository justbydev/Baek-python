import sys
sys.setrecursionlimit(10**8)
def dfs(N, mp, nowx, nowy, height, visit, dx, dy, left, right):
    for i in range(8):
        nx=nowx+dx[i]
        ny=nowy+dy[i]
        if nx<0 or nx>=N or ny<0 or ny>=N or visit[nx][ny]==1 or height[nx][ny]<left or height[nx][ny]>right:
            continue
        visit[nx][ny]=1
        dfs(N, mp, nx, ny, height, visit, dx, dy, left, right)
N=int(sys.stdin.readline())
mp=[]
for _ in range(N):
    mp.append(list(sys.stdin.readline().rstrip()))
height=[]
for _ in range(N):
    height.append(list(map(int, sys.stdin.readline().split())))
stx=sty=-1
let=dict()
h=[]
cnt=0
for i in range(N):
    for j in range(N):
        if mp[i][j]=='P':
            stx=i
            sty=j
            break
        elif mp[i][j]=='K':
            let[cnt]=[i,j]
            cnt+=1
        h.append(height[i][j])
h.sort()
realh=[]
realh.append(h[0])
for i in range(1, len(h)):
    if h[i-1]!=h[i]:
        realh.append(h[i])
res=1000001
l=0
r=0
dx=[-1, -1, 0, 1, 1, 1, 0, -1]
dy=[0, 1, 1, 1, 0, -1, -1, -1]
while True:
    if r>=len(realh):
        break
    while True:
        flag=1
        visit=[[0]*N for _ in range(N)]
        visit[stx][sty]=1
        dfs(N, mp, stx, sty, height, visit, dx, dy, realh[l], realh[r])
        for i in range(len(let)):
            if visit[let[i][0]][let[i][1]]==0:
                flag=0
                break
        if flag==0:
            break
        res=min(res, realh[r]-realh[l])
        l+=1
    r+=1
    
print(res)