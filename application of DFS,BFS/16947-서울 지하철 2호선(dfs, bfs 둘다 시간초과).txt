import sys
from collections import deque
sys.setrecursionlimit(10**8)
def bfs(cycle_check, graph, st):
    queue=deque()
    count=deque()
    queue.append(st)
    count.append(1)
    visit=[0]*(N+1)
    visit[st]=1
    while queue:
        now=queue.popleft()
        cnt=count.popleft()
        for i in range(len(graph[now])):
            nxt=graph[now][i]
            if cycle_check[nxt]==1:
                return cnt
            if visit[nxt]==0:
                visit[nxt]=1
                queue.append(nxt)
                count.append(cnt+1)
def dfs(visit, graph, now, start, cnt, flag):
    for i in range(len(graph[now])):
        if flag[0]==1:
            return
        if visit[graph[now][i]]==0:
            visit[graph[now][i]]=1
            dfs(visit, graph, graph[now][i], start, cnt+1, flag)
            if flag[0]==1:
                return
        else:
            if graph[now][i]==start and cnt>=3:
                flag[0]=1
                return
N=int(sys.stdin.readline())
graph=[[] for _ in range(N+1)]
for _ in range(N):
    st,ed=map(int, sys.stdin.readline().split())
    graph[st].append(ed)
    graph[ed].append(st)
cycle_check=[0]*(N+1)
flag=[0]
for i in range(1, N+1):
    visit=[0]*(N+1)
    visit[i]=1
    flag[0]=0
    dfs(visit, graph, i, i, 1, flag)
    if flag[0]==1:
        cycle_check[i]=1
res=[0]*(N+1)
for i in range(1, N+1):
    if cycle_check[i]==1:
        res[i]=0
    else:
        r=bfs(cycle_check, graph, i)
        res[i]=r
for i in range(1, N+1):
    print(res[i], end=' ')
print()