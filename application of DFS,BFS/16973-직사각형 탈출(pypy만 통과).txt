import sys
from collections import deque

def bfs(N, M, mp, H, W, sx, sy, fx, fy, wall, wl):
    queue=deque()
    queue.append([sx,sy])
    count=deque()
    count.append(0)
    visit=[[0]*M for _ in range(N)]
    visit[sx][sy]=1
    dx=[0, -1, 0, 1]
    dy=[-1, 0, 1, 0]
    while queue:
        now=queue.popleft()
        cnt=count.popleft()
        for i in range(4):
            nowx=now[0]+dx[i]
            nowy=now[1]+dy[i]
            ex=nowx+H-1
            ey=nowy+W-1
            r=1
            if nowx<0 or nowx>=N or nowy<0 or nowy>=M or ex<0 or ex>=N or ey<0 or ey>=M or visit[nowx][nowy]==1:
                continue
            for j in range(wl):
                if wall[j][0]>=nowx and wall[j][0]<=ex and wall[j][1]>=nowy and wall[j][1]<=ey:
                    r=0
                    break
            if r==1:
                if nowx==fx and nowy==fy:
                    return cnt+1
                queue.append([nowx, nowy])
                count.append(cnt+1)
                visit[nowx][nowy]=1
    return -1

N,M=map(int, sys.stdin.readline().split())
mp=[]
for _ in range(N):
    mp.append(list(map(int, sys.stdin.readline().split())))
H,W,sx,sy,fx,fy=map(int, sys.stdin.readline().split())
wall=[]
for i in range(N):
    for j in range(M):
        if mp[i][j]==1:
            wall.append([i,j])
wl=len(wall)
sx-=1
sy-=1
fx-=1
fy-=1
print(bfs(N, M, mp, H, W, sx, sy, fx, fy, wall, wl))