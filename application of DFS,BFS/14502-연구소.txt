import sys
import copy
from collections import deque

def bfs(N, M, mp):
    queue=deque()
    for i in range(N):
        for j in range(M):
            if mp[i][j]==2:
                queue.append([i, j])
    dx=[0, -1, 0, 1]
    dy=[-1, 0, 1, 0]
    while queue:
        now=queue.popleft()
        for i in range(4):
            nowx=now[0]+dx[i]
            nowy=now[1]+dy[i]
            if nowx<0 or nowx>=N or nowy<0 or nowy>=M or mp[nowx][nowy]==1 or mp[nowx][nowy]==2:
                continue
            mp[nowx][nowy]=2
            queue.append([nowx, nowy])
    cnt=0
    for i in range(N):
        for j in range(M):
            if mp[i][j]==0:
                cnt+=1
    return cnt
def make_wall(N, M, mp, cnt, stx, sty, res):
    if cnt==3:
        r=bfs(N, M, mp)
        if res[0]==-1:
            res[0]=r
        else:
            res[0]=max(res[0], r)
    else:
        temp=[]
        for i in range(stx, N):
            if i==stx:
                for j in range(sty, M):
                    if mp[i][j]==0:
                        temp=copy.deepcopy(mp)
                        temp[i][j]=1
                        if j==M-1:
                            make_wall(N, M, temp, cnt+1, i+1, 0, res)
                        else:
                            make_wall(N, M, temp, cnt+1, i, j+1, res)
            else:
                for j in range(M):
                    if mp[i][j]==0:
                        temp=copy.deepcopy(mp)
                        temp[i][j]=1
                        if j==M-1:
                            make_wall(N, M, temp, cnt+1, i+1, 0, res)
                        else:
                            make_wall(N, M, temp, cnt+1, i, j+1, res)
    
N,M=map(int, sys.stdin.readline().split())
mp=[]
temp=[]
res=[0]
for _ in range(N):
    mp.append(list(map(int, sys.stdin.readline().split())))
for i in range(N):
    for j in range(M):
        if mp[i][j]==0:
            temp=copy.deepcopy(mp)
            temp[i][j]=1
            if j==M-1:
                make_wall(N, M, temp, 1, i+1, 0, res)
            else:
                make_wall(N, M, temp, 1, i, j+1, res)
print(res[0])