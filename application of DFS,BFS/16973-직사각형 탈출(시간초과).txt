import sys
from collections import deque
def check(mp, sx, sy, H, W, N, M):
    for i in range(sx, sx+H):
        for j in range(sy, sy+W):
            if i>=N or j>=M:
                return -1
            if mp[i][j]==1:
                return -1
    return 1
def bfs(N, M, mp, H, W, sx, sy, fx, fy):
    queue=deque()
    queue.append([sx,sy])
    count=deque()
    count.append(0)
    visit=[[0]*M for _ in range(N)]
    visit[sx][sy]=1
    dx=[0, -1, 0, 1]
    dy=[-1, 0, 1, 0]
    while queue:
        now=queue.popleft()
        cnt=count.popleft()
        for i in range(4):
            nowx=now[0]+dx[i]
            nowy=now[1]+dy[i]
            if nowx<0 or nowx>=N or nowy<0 or nowy>=M or visit[nowx][nowy]==1:
                continue
            r=check(mp, nowx, nowy, H, W, N, M)
            if r==1:
                if nowx==fx and nowy==fy:
                    return cnt+1
                queue.append([nowx, nowy])
                count.append(cnt+1)
                visit[nowx][nowy]=1
    return -1

N,M=map(int, sys.stdin.readline().split())
mp=[]
for _ in range(N):
    mp.append(list(map(int, sys.stdin.readline().split())))
H,W,sx,sy,fx,fy=map(int, sys.stdin.readline().split())
sx-=1
sy-=1
fx-=1
fy-=1
print(bfs(N, M, mp, H, W, sx, sy, fx, fy))