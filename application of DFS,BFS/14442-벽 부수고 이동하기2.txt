import sys
from collections import deque

def bfs(N, M, K, board, res):
    queue=deque()
    count=deque()
    visit=[[[0]*M for _ in range(N)] for _ in range(K+1)]
    queue.append([0, 0, 0])
    visit[0][0][0]=1
    count.append(1)
    dx=[0, -1, 0, 1]
    dy=[-1, 0, 1, 0]
    while queue:
        now=queue.popleft()
        cnt=count.popleft()
        for i in range(4):
            nowx=now[0]+dx[i]
            nowy=now[1]+dy[i]
            if nowx<0 or nowx>=N or nowy<0 or nowy>=M:
                continue
            if nowx==N-1 and nowy==M-1:
                res[0]=cnt+1
                return 1
            if board[nowx][nowy]=='0':
                if visit[now[2]][nowx][nowy]==0:
                    queue.append([nowx, nowy, now[2]])
                    count.append(cnt+1)
                    visit[now[2]][nowx][nowy]=1
            else:
                if now[2]==K:
                    continue
                if visit[now[2]][nowx][nowy]==0:
                    visit[now[2]][nowx][nowy]=1
                    queue.append([nowx, nowy, now[2]+1])
                    count.append(cnt+1)
    return -1
                    
                    
N,M,K=map(int, sys.stdin.readline().split())
board=[]
for i in range(N):
    board.append(list(sys.stdin.readline().rstrip()))
if N==1 and M==1:
    if K==0:
        if board[0][0]=='1':
            print(-1)
        else:
            print(1)
    else:
        print(1)
else:
    res=[-1]
    bfs(N, M, K, board, res)
    print(res[0])