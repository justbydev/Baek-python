import sys

def dfs(graph, N, M, V, res):
    stack=[]
    visit=[]
    for i in range(N+1):
        visit.append(0)
    stack.append(V)
    while True:
        if len(stack)==0:
            break
        a=stack.pop()
        if visit[a]==0:
            visit[a]=1
            res.append(a)
            for i in range(N, 0, -1):
                if graph[a][i]==1 and visit[i]==0:
                    stack.append(i)

def bfs(gaph, N, M, V, res):
    queue=[]
    visit=[]
    for i in range(N+1):
        visit.append(0)
    queue.append(V)
    visit[V]=1
    res.append(V)
    while True:
        if len(queue)==0:
            break
        a=queue.pop(0)
        for i in range(1, N+1):
            if graph[a][i]==1 and visit[i]==0:
                queue.append(i)
                visit[i]=1
                res.append(i)

N,M,V=map(int, sys.stdin.readline().split())


graph=[]
for i in range(N+1):
    tmp=[]
    for j in range(N+1):
        tmp.append(0)
    graph.append(tmp)

for i in range(M):
    st,ed=map(int, sys.stdin.readline().split())
    graph[st][ed]=1
    graph[ed][st]=1

dfs_res=[]
dfs(graph, N, M, V, dfs_res)
bfs_res=[]
bfs(graph, N, M, V, bfs_res)

for i in range(len(dfs_res)):
    print(dfs_res[i], end=' ')
print()
for i in range(len(bfs_res)):
    print(bfs_res[i], end=' ')
print()