import sys
sys.setrecursionlimit(10**8)
def check(N, H, ladder):
    flag=1
    for i in range(N):
        nowsero=0
        nowgaro=i
        while True:
            if nowsero>=H:
                break
            if nowgaro<N-1 and ladder[nowsero][nowgaro]==1:
                nowgaro+=1
                nowsero+=1
                continue
            if nowgaro-1>=0 and ladder[nowsero][nowgaro-1]==1:
                nowgaro-=1
                nowsero+=1
                continue
            nowsero+=1
        if i!=nowgaro:
            flag=0
            break
    return flag
def dfs(N, H, ladder, res, cnt, st, ed):
    r=check(N, H, ladder)
    if r==1:
        res[0]=min(res[0], cnt)
        return
    if cnt>=3:
        return
    if st>=H:
        return
    for i in range(st, H):
        if i==st:
            for j in range(ed, N-1):
                
                if ladder[i][j]==0:
                    ladder[i][j]=1
                    if j>=N-2:
                        dfs(N, H, ladder, res, cnt+1, i+1, 0)
                    else:
                        dfs(N, H, ladder, res, cnt+1, i, j+1)
                    ladder[i][j]=0
        else:
            for j in range(N-1):
                
                if ladder[i][j]==0:
                    ladder[i][j]=1
                    if j>=N-2:
                        dfs(N, H, ladder, res, cnt+1, i+1, 0)
                    else:
                        dfs(N, H, ladder, res, cnt+1, i, j+1)
                    ladder[i][j]=0
N,M,H=map(int, sys.stdin.readline().split())
ladder=[[0]*(N-1) for _ in range(H)]
for _ in range(M):
    a,b=map(int, sys.stdin.readline().split())
    ladder[a-1][b-1]=1
    if b-2>=0:
        ladder[a-1][b-2]=2
    if b<N-1:
        ladder[a-1][b]=2
res=[4]
dfs(N, H, ladder, res, 0, 0, 0)
if res[0]>=0 and res[0]<=3:
    print(res[0])
else:
    print(-1)